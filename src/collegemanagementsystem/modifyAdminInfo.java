/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package collegemanagementsystem;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Paul-Vance Pierre Nixon Jr.
 */
public class modifyAdminInfo extends javax.swing.JFrame {

    /**
     * Creates new form modifyAdminInfo
     */
    public modifyAdminInfo() {
        initComponents();
        conn = databaseConnection.Connect();
        adminLoad();
    }

    // Global variables
    Connection conn; // Connection to the MySQL database
    PreparedStatement pst; // To write queries to the database 
    ResultSet rs; // To access tables derived from queries
    DefaultTableModel dtm; // To modify the table
    
    /*
    adminLoad() is a fetch function which retrieves every admin's info from the
    MySQL database and renders them in the table.
    Pre-condition: There's at least one admin entry in the database.
    Post-condition: The admins' info is rendered in the table.
    */
    private void adminLoad()
    {
        try
        {
            // Load each admin's info.
            pst = conn.prepareStatement("select * from admin");
            rs = pst.executeQuery();
            
            // Set the number of the table's rows to 0.
            ResultSetMetaData rsd = rs.getMetaData(); // To get the number of columns from the query
            dtm = (DefaultTableModel)admin_info_table.getModel();
            dtm.setRowCount(0);
            
            // Load each admin's info into the table.
            while (rs.next())
            {
                Vector vector = new Vector();
                
                for (int index = 1; index <= rsd.getColumnCount(); index++)
                {
                    vector.add(rs.getString("adminNo"));
                    vector.add(rs.getString("prefix"));
                    vector.add(rs.getString("fName"));
                    vector.add(rs.getString("mName"));
                    vector.add(rs.getString("lName"));
                    vector.add(rs.getString("suffix"));
                    vector.add(rs.getString("DOB"));
                    vector.add(rs.getString("gender"));
                    vector.add(rs.getString("ethnicity"));
                    vector.add(rs.getString("email"));
                    vector.add(rs.getString("uniEmail"));
                    vector.add(rs.getString("username"));
                    vector.add(rs.getString("password"));
                    vector.add(rs.getString("telNo"));
                }
                
                dtm.addRow(vector); // Adds a admin's info as one of the table's rows
            }
        }
        catch (SQLException ex)
        {
            Logger.getLogger(modifyAdminInfo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        admin_info_form = new javax.swing.JPanel();
        prefix_label = new javax.swing.JLabel();
        prefix_combo_box = new javax.swing.JComboBox<>();
        fName_label = new javax.swing.JLabel();
        fName_text_field = new javax.swing.JTextField();
        mName_label = new javax.swing.JLabel();
        mName_text_field = new javax.swing.JTextField();
        lName_label = new javax.swing.JLabel();
        lName_text_field = new javax.swing.JTextField();
        suffix_label = new javax.swing.JLabel();
        suffix_combo_box = new javax.swing.JComboBox<>();
        id_label = new javax.swing.JLabel();
        id_spinner = new javax.swing.JSpinner();
        dob_label = new javax.swing.JLabel();
        dob_text_field = new javax.swing.JFormattedTextField();
        gender_label = new javax.swing.JLabel();
        gender_combo_box = new javax.swing.JComboBox<>();
        ethnicity_label = new javax.swing.JLabel();
        ethnicity_combo_box = new javax.swing.JComboBox<>();
        email_label = new javax.swing.JLabel();
        password_label = new javax.swing.JLabel();
        password_text_field = new javax.swing.JPasswordField();
        phone_label = new javax.swing.JLabel();
        phone_text_field = new javax.swing.JFormattedTextField();
        email_text_field = new javax.swing.JTextField();
        admin_info_scroll_pane = new javax.swing.JScrollPane();
        admin_info_table = new javax.swing.JTable();
        insertButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        modifyAdminInfo_MenuBar = new javax.swing.JMenuBar();
        backButton = new javax.swing.JMenu();
        logoutButton = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        admin_info_form.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        prefix_label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        prefix_label.setText("Prefix:");

        prefix_combo_box.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "null", "Dr.", "Miss", "Mr.", "Mrs.", "Ms.", "Professor" }));
        prefix_combo_box.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        fName_label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        fName_label.setText("First name:");

        mName_label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        mName_label.setText("Middle name:");

        lName_label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lName_label.setText("Last name:");

        suffix_label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        suffix_label.setText("Suffix:");

        suffix_combo_box.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "null", "Esq.", "I", "II", "III", "IV", "V", "VI", "VII", "M.D.", "Ph.D.", "Jr.", "Sr." }));
        suffix_combo_box.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        id_label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        id_label.setText("ID:");

        id_spinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 255, 1));

        dob_label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        dob_label.setText("DOB:");

        dob_text_field.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("y/M/d"))));

        gender_label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        gender_label.setText("Gender:");

        gender_combo_box.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "M", "F" }));
        gender_combo_box.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        ethnicity_label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        ethnicity_label.setText("Ethnicity:");

        ethnicity_combo_box.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hispanic or Latino", "American Indian or Alaska Native", "Asian", "Black or African American", "Native Hawaiian or Other Pacific Islander", "White" }));
        ethnicity_combo_box.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        email_label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        email_label.setText("Email:");

        password_label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        password_label.setText("Password:");

        phone_label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        phone_label.setText("Phone:");

        try {
            phone_text_field.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("555-###-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        javax.swing.GroupLayout admin_info_formLayout = new javax.swing.GroupLayout(admin_info_form);
        admin_info_form.setLayout(admin_info_formLayout);
        admin_info_formLayout.setHorizontalGroup(
            admin_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(admin_info_formLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(admin_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, admin_info_formLayout.createSequentialGroup()
                        .addComponent(mName_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mName_text_field))
                    .addGroup(admin_info_formLayout.createSequentialGroup()
                        .addComponent(lName_label)
                        .addGap(18, 18, 18)
                        .addGroup(admin_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lName_text_field)
                            .addGroup(admin_info_formLayout.createSequentialGroup()
                                .addGroup(admin_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(admin_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(id_spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(suffix_combo_box, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(dob_text_field))
                                    .addComponent(gender_combo_box, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ethnicity_combo_box, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(admin_info_formLayout.createSequentialGroup()
                        .addGroup(admin_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fName_label)
                            .addComponent(prefix_label)
                            .addComponent(suffix_label)
                            .addComponent(id_label)
                            .addComponent(dob_label)
                            .addComponent(gender_label)
                            .addComponent(ethnicity_label)
                            .addComponent(email_label))
                        .addGroup(admin_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(admin_info_formLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(admin_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(prefix_combo_box, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fName_text_field, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(admin_info_formLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(email_text_field, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(admin_info_formLayout.createSequentialGroup()
                        .addGroup(admin_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(password_label)
                            .addComponent(phone_label))
                        .addGap(22, 22, 22)
                        .addGroup(admin_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(password_text_field)
                            .addComponent(phone_text_field))))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        admin_info_formLayout.setVerticalGroup(
            admin_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(admin_info_formLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(admin_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prefix_label)
                    .addComponent(prefix_combo_box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(admin_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fName_label)
                    .addComponent(fName_text_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(admin_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mName_label)
                    .addComponent(mName_text_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(admin_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lName_label)
                    .addComponent(lName_text_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(admin_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(suffix_label)
                    .addComponent(suffix_combo_box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(admin_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(id_label)
                    .addComponent(id_spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(admin_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dob_label)
                    .addComponent(dob_text_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(admin_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gender_label)
                    .addComponent(gender_combo_box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(admin_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ethnicity_label)
                    .addComponent(ethnicity_combo_box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(admin_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(email_label)
                    .addComponent(email_text_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(admin_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(password_label)
                    .addComponent(password_text_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(admin_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phone_label)
                    .addComponent(phone_text_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        admin_info_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Prefix", "fName", "mName", "lName", "Suffix", "DOB", "Gender", "Ethnicity", "Email", "uniEmail", "Username", "Password", "telNo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        admin_info_table.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        admin_info_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                admin_info_tableMouseClicked(evt);
            }
        });
        admin_info_scroll_pane.setViewportView(admin_info_table);

        insertButton.setText("Insert");
        insertButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        insertButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                insertButtonMouseClicked(evt);
            }
        });

        updateButton.setText("Update");
        updateButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        updateButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateButtonMouseClicked(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        deleteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteButtonMouseClicked(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        clearButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearButtonMouseClicked(evt);
            }
        });

        backButton.setText("Back");
        backButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backButtonMouseClicked(evt);
            }
        });
        modifyAdminInfo_MenuBar.add(backButton);

        logoutButton.setText("Logout");
        logoutButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        logoutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logoutButtonMouseClicked(evt);
            }
        });
        modifyAdminInfo_MenuBar.add(logoutButton);

        setJMenuBar(modifyAdminInfo_MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(insertButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(admin_info_form, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 130, Short.MAX_VALUE)
                        .addComponent(admin_info_scroll_pane, javax.swing.GroupLayout.PREFERRED_SIZE, 561, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(admin_info_scroll_pane, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(admin_info_form, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(insertButton)
                    .addComponent(updateButton)
                    .addComponent(deleteButton)
                    .addComponent(clearButton))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backButtonMouseClicked
        // Display adminHome.java.
        this.hide();
        new adminHome().setVisible(true); // Displays adminHome.java
    }//GEN-LAST:event_backButtonMouseClicked

    private void logoutButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutButtonMouseClicked
        // Logout of the account and display Login.java.
        this.hide();
        new Login().setVisible(true); // Displays Login.java
    }//GEN-LAST:event_logoutButtonMouseClicked

    private void admin_info_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_admin_info_tableMouseClicked
        // Get the clicked row.
        dtm = (DefaultTableModel)admin_info_table.getModel();
        int selectedIndex = admin_info_table.getSelectedRow();
        
        // Set every field in the form to its respective table value.
        prefix_combo_box.setSelectedItem(dtm.getValueAt(selectedIndex, 1));
        fName_text_field.setText(dtm.getValueAt(selectedIndex, 2).toString());
        mName_text_field.setText(dtm.getValueAt(selectedIndex, 3).toString());
        lName_text_field.setText(dtm.getValueAt(selectedIndex, 4).toString());
        suffix_combo_box.setSelectedItem(dtm.getValueAt(selectedIndex, 5));
        dob_text_field.setText(dtm.getValueAt(selectedIndex, 6).toString());
        gender_combo_box.setSelectedItem(dtm.getValueAt(selectedIndex, 7));
        ethnicity_combo_box.setSelectedItem(dtm.getValueAt(selectedIndex, 8));
        email_text_field.setText(dtm.getValueAt(selectedIndex, 9).toString());
        password_text_field.setText(dtm.getValueAt(selectedIndex, 12).toString());
        phone_text_field.setText(dtm.getValueAt(selectedIndex, 13).toString());
        
        // Disable the Insert button.
        insertButton.setEnabled(false);
    }//GEN-LAST:event_admin_info_tableMouseClicked

    private void insertButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_insertButtonMouseClicked
        /*
        Check if the admin filled all the text fields. If not, display a pop-up 
        telling them to fill the specified text field. If so, insert the new
        admin's info into the database.
        */
        if (fName_text_field.getText().isEmpty() || fName_text_field.getText().length() > 20)
        {
            JOptionPane.showMessageDialog(this, "The 'First name' text field is either "
                                         + "empty or exceeds 20 characters.");
        }
        else if (mName_text_field.getText().isEmpty() || mName_text_field.getText().length() > 20)
        {
            JOptionPane.showMessageDialog(this, "The 'Middle name' text field is either "
                                         + "empty or exceeds 20 characters.");
        }
        else if (lName_text_field.getText().isEmpty() || lName_text_field.getText().length() > 20)
        {
            JOptionPane.showMessageDialog(this, "The 'Last name' text field is either "
                                         + "empty or exceeds 20 characters.");
        }
        else if (dob_text_field.getText().isEmpty())
            JOptionPane.showMessageDialog(this, "The 'DOB' text field is empty.");
        else if (!(Pattern.matches("^[a-zA-Z0-9]+[@]{1}+[a-zA-Z0-9]+[.]{1}+[a-zA-Z0-9]+$", email_text_field.getText())) || email_text_field.getText().length() > 30)
        {
            JOptionPane.showMessageDialog(this, "The 'Email' text field is either "
                                         + "invalid or exceeds 30 characters.");
        }
        else if (password_text_field.getText().isEmpty() || password_text_field.getText().length() > 30)
        {
            JOptionPane.showMessageDialog(this, "The 'Password' text field is either "
                                         + "empty or exceeds 30 characters.");
        }
        else if (phone_text_field.getText().isEmpty())
            JOptionPane.showMessageDialog(this, "The 'Phone' text field is empty.");
        else
        {
            try
            {
                String username = email_text_field.getText().substring(0, 
                                    email_text_field.getText().indexOf('@'));
                String uniEmail = username + "@mascot.uni.edu";
            
                // Insert the values into the database.
                pst = conn.prepareStatement("insert into admin(prefix, fName, mName, lName, "
                                          + "suffix, DOB, gender, ethnicity, email, uniEmail, "
                                          + "password, username, telNo) "
                                          + "values(?,?,?,?,?,?,?,?,?,?,"
                                          + "?,?,?)");
                pst.setString(1, prefix_combo_box.getSelectedItem().toString());
                pst.setString(2, fName_text_field.getText());
                pst.setString(3, mName_text_field.getText());
                pst.setString(4, lName_text_field.getText());
                pst.setString(5, suffix_combo_box.getSelectedItem().toString());
                pst.setString(6, dob_text_field.getText());
                pst.setString(7, gender_combo_box.getSelectedItem().toString());
                pst.setString(8, ethnicity_combo_box.getSelectedItem().toString());
                pst.setString(9, email_text_field.getText());
                pst.setString(10, uniEmail);
                pst.setString(11, password_text_field.getText());
                pst.setString(12, username);
                pst.setString(13, phone_text_field.getText());
                pst.executeUpdate();
            
                /* Confirm to the admin that a new admin's info has been added
                   to the database, clear the form, 
                   and reload all the remaining admins' info.
                */
                JOptionPane.showMessageDialog(this, "New admin added.");
                insertButton.setEnabled(true); // Enables the Insert button
                fName_text_field.setText("");
                mName_text_field.setText("");
                lName_text_field.setText("");
                dob_text_field.setText("");
                email_text_field.setText("");
                password_text_field.setText("");
                phone_text_field.setText("");
                adminLoad();
            }
            catch (SQLException ex)
            {
                Logger.getLogger(modifyAdminInfo.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_insertButtonMouseClicked

    private void updateButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateButtonMouseClicked
        /*
        Check if the admin filled all the text fields. If not, display a pop-up 
        telling them to fill the specified text field. If so, update the
        admin's info.
        */
        if (fName_text_field.getText().isEmpty() || fName_text_field.getText().length() > 20)
        {
            JOptionPane.showMessageDialog(this, "The 'First name' text field is either "
                                         + "empty or exceeds 20 characters.");
        }
        else if (mName_text_field.getText().isEmpty() || mName_text_field.getText().length() > 20)
        {
            JOptionPane.showMessageDialog(this, "The 'Middle name' text field is either "
                                         + "empty or exceeds 20 characters.");
        }
        else if (lName_text_field.getText().isEmpty() || lName_text_field.getText().length() > 20)
        {
            JOptionPane.showMessageDialog(this, "The 'Last name' text field is either "
                                         + "empty or exceeds 20 characters.");
        }
        else if (dob_text_field.getText().isEmpty())
            JOptionPane.showMessageDialog(this, "The 'DOB' text field is empty.");
        else if (!(Pattern.matches("^[a-zA-Z0-9]+[@]{1}+[a-zA-Z0-9]+[.]{1}+[a-zA-Z0-9]+$", email_text_field.getText())) || email_text_field.getText().length() > 30)
        {
            JOptionPane.showMessageDialog(this, "The 'Email' text field is either "
                                         + "invalid or exceeds 30 characters.");
        }
        else if (password_text_field.getText().isEmpty() || password_text_field.getText().length() > 30)
        {
            JOptionPane.showMessageDialog(this, "The 'Password' text field is either "
                                         + "empty or exceeds 30 characters.");
        }
        else if (phone_text_field.getText().isEmpty())
            JOptionPane.showMessageDialog(this, "The 'Phone' text field is empty.");
        else
        {
            try
            {
                // Get the clicked row.
                dtm = (DefaultTableModel)admin_info_table.getModel();
                int selectedIndex = admin_info_table.getSelectedRow();
            
                // Update each of the selected student's info to its respective field's value.
                String new_username = email_text_field.getText().substring(0, 
                        email_text_field.getText().indexOf('@'));
                String uniEmail = new_username + "@mascot.uni.edu";
                
                pst = conn.prepareStatement("update admin set prefix = ?, "
                                         + "fName = ?, mName = ?, lName = ?, suffix = ?, "
                                         + "DOB = ?, gender = ?, ethnicity = ?, email = ?, "
                                         + "uniEmail = ?, username = ?, password = ?, telNo = ? "
                                         + "where username = ?");
                pst.setString(1, prefix_combo_box.getSelectedItem().toString());
                pst.setString(2, fName_text_field.getText());
                pst.setString(3, mName_text_field.getText());
                pst.setString(4, lName_text_field.getText());
                pst.setString(5, suffix_combo_box.getSelectedItem().toString());
                pst.setString(6, dob_text_field.getText());
                pst.setString(7, gender_combo_box.getSelectedItem().toString());
                pst.setString(8, ethnicity_combo_box.getSelectedItem().toString());
                pst.setString(9, email_text_field.getText());
                pst.setString(10, uniEmail);
                pst.setString(11, new_username);
                pst.setString(12, password_text_field.getText());
                pst.setString(13, phone_text_field.getText());
                pst.setString(14, dtm.getValueAt(selectedIndex, 11).toString());
                pst.executeUpdate();
            
                /* Confirm to the admin that the selected admin's info has been updated,
                   clear the form, and reload each admin's info.
                */
                JOptionPane.showMessageDialog(this, "Admin's info is updated.");
                insertButton.setEnabled(true); // Enables the insert button
                fName_text_field.setText("");
                mName_text_field.setText("");
                lName_text_field.setText("");
                dob_text_field.setText("");
                email_text_field.setText("");
                password_text_field.setText("");
                phone_text_field.setText("");
                adminLoad();
            }
            catch (SQLException ex)
            {
                Logger.getLogger(modifyAdminInfo.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_updateButtonMouseClicked

    private void deleteButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseClicked
        try
        {
            // Get the clicked row.
            dtm = (DefaultTableModel)admin_info_table.getModel();
            int selectedIndex = admin_info_table.getSelectedRow();
            
            // Delete the selected admin's info from both the database and the table.
            pst = conn.prepareStatement("delete from admin where username = ?");
            pst.setString(1, dtm.getValueAt(selectedIndex, 11).toString());
            pst.executeUpdate();
            
            /* Confirm to the admin that the selected admin's info has been deleted,
               clear the form, and reload the remaining admins' info.
            */
            JOptionPane.showMessageDialog(this, "Admin's info is deleted.");
            insertButton.setEnabled(true); // Enables the Insert button
            fName_text_field.setText("");
            mName_text_field.setText("");
            lName_text_field.setText("");
            dob_text_field.setText("");
            email_text_field.setText("");
            password_text_field.setText("");
            phone_text_field.setText("");
            adminLoad();
        }
        catch (SQLException ex)
        {
            Logger.getLogger(modifyAdminInfo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_deleteButtonMouseClicked

    private void clearButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearButtonMouseClicked
        // Clear all the text fields.
        insertButton.setEnabled(true); // Enables the insert button
        fName_text_field.setText("");
        mName_text_field.setText("");
        lName_text_field.setText("");
        dob_text_field.setText("");
        email_text_field.setText("");
        password_text_field.setText("");
        phone_text_field.setText("");
    }//GEN-LAST:event_clearButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(modifyAdminInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(modifyAdminInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(modifyAdminInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(modifyAdminInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new modifyAdminInfo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel admin_info_form;
    private javax.swing.JScrollPane admin_info_scroll_pane;
    private javax.swing.JTable admin_info_table;
    private javax.swing.JMenu backButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel dob_label;
    private javax.swing.JFormattedTextField dob_text_field;
    private javax.swing.JLabel email_label;
    private javax.swing.JTextField email_text_field;
    private javax.swing.JComboBox<String> ethnicity_combo_box;
    private javax.swing.JLabel ethnicity_label;
    private javax.swing.JLabel fName_label;
    private javax.swing.JTextField fName_text_field;
    private javax.swing.JComboBox<String> gender_combo_box;
    private javax.swing.JLabel gender_label;
    private javax.swing.JLabel id_label;
    private javax.swing.JSpinner id_spinner;
    private javax.swing.JButton insertButton;
    private javax.swing.JLabel lName_label;
    private javax.swing.JTextField lName_text_field;
    private javax.swing.JMenu logoutButton;
    private javax.swing.JLabel mName_label;
    private javax.swing.JTextField mName_text_field;
    private javax.swing.JMenuBar modifyAdminInfo_MenuBar;
    private javax.swing.JLabel password_label;
    private javax.swing.JPasswordField password_text_field;
    private javax.swing.JLabel phone_label;
    private javax.swing.JFormattedTextField phone_text_field;
    private javax.swing.JComboBox<String> prefix_combo_box;
    private javax.swing.JLabel prefix_label;
    private javax.swing.JComboBox<String> suffix_combo_box;
    private javax.swing.JLabel suffix_label;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
