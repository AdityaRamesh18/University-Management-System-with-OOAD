/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package collegemanagementsystem;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Paul-Vance Pierre Nixon Jr.
 */
public class modifyCourseInfo extends javax.swing.JFrame {

    /**
     * Creates new form modifyCourseInfo
     */
    public modifyCourseInfo() {
        initComponents();
        conn = databaseConnection.Connect();
        courseLoad();
        
        try
        {
            // Load each college's name.
            pst = conn.prepareStatement("select name from college");
            rs = pst.executeQuery();
            
            // Load all the colleges' names into the combo box.
            while (rs.next())
                college_combo_box.addItem(rs.getString("name"));
            
        }
        catch (SQLException ex)
        {
            Logger.getLogger(modifyCourseInfo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Global variables
    Connection conn; // Connection to the MySQL database
    PreparedStatement pst; // To write queries to the database 
    ResultSet rs; // To access tables derived from queries
    DefaultTableModel dtm; // To modify the table
    
    /*
    courseLoad() is a fetch function which retrieves every course's info from the
    MySQL database and renders them in the table.
    Pre-condition: There's at least one course entry in the database.
    Post-condition: The courses' info is rendered in the table.
    */
    private void courseLoad()
    {
        try
        {
            // Load each department's info.
            pst = conn.prepareStatement("select * from course");
            rs = pst.executeQuery();
            
            // Set the number of the table's rows to 0.
            ResultSetMetaData rsd = rs.getMetaData(); // To get the number of columns from the query
            dtm = (DefaultTableModel)course_info_table.getModel();
            dtm.setRowCount(0);
            
            // Load each course's info into the table.
            while (rs.next())
            {
                Vector vector = new Vector();
                
                for (int index = 1; index <= rsd.getColumnCount(); index++)
                {
                    vector.add(rs.getString("name"));
                    vector.add(rs.getString("courseNo"));
                    vector.add(rs.getString("description"));
                    vector.add(rs.getString("college"));
                    vector.add(rs.getString("department"));
                    vector.add(rs.getString("type"));
                    vector.add(rs.getString("mode"));
                    vector.add(rs.getString("instructor_prefix"));
                    vector.add(rs.getString("instructor_fName"));
                    vector.add(rs.getString("instructor_mName"));
                    vector.add(rs.getString("instructor_lName"));
                    vector.add(rs.getString("instructor_suffix"));
                    vector.add(rs.getString("numStudents"));
                    vector.add(rs.getString("maxStudents"));
                    vector.add(rs.getString("credits"));
                    vector.add(rs.getString("startTime"));
                    vector.add(rs.getString("endTime"));
                    vector.add(rs.getString("location"));
                    vector.add(rs.getString("classroomNo"));
                    vector.add(rs.getString("courseDays"));
                    vector.add(rs.getString("crn"));
                }
                
                dtm.addRow(vector); // Adds a course's info as one of the table's rows
            }
        }
        catch (SQLException ex)
        {
            Logger.getLogger(modifyCourseInfo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        course_info_form = new javax.swing.JPanel();
        name_label = new javax.swing.JLabel();
        name_text_field = new javax.swing.JTextField();
        courseNo_label = new javax.swing.JLabel();
        courseNo_spinner = new javax.swing.JSpinner();
        description_label = new javax.swing.JLabel();
        description_text_field = new javax.swing.JTextField();
        college_label = new javax.swing.JLabel();
        college_combo_box = new javax.swing.JComboBox<>();
        dept_label = new javax.swing.JLabel();
        dept_combo_box = new javax.swing.JComboBox<>();
        type_label = new javax.swing.JLabel();
        type_combo_box = new javax.swing.JComboBox<>();
        mode_label = new javax.swing.JLabel();
        mode_combo_box = new javax.swing.JComboBox<>();
        maxStudents_label = new javax.swing.JLabel();
        maxStudents_spinner = new javax.swing.JSpinner();
        credits_label = new javax.swing.JLabel();
        credits_spinner = new javax.swing.JSpinner();
        startTime_label = new javax.swing.JLabel();
        startTime_text_field = new javax.swing.JFormattedTextField();
        endTime_label = new javax.swing.JLabel();
        endTime_text_field = new javax.swing.JFormattedTextField();
        location_label = new javax.swing.JLabel();
        classroomNo_label = new javax.swing.JLabel();
        classroomNo_text_field = new javax.swing.JFormattedTextField();
        courseDays_label = new javax.swing.JLabel();
        courseDays_combo_box = new javax.swing.JComboBox<>();
        crn_label = new javax.swing.JLabel();
        crn_spinner = new javax.swing.JSpinner();
        location_combo_box = new javax.swing.JComboBox<>();
        course_info_scroll_table = new javax.swing.JScrollPane();
        course_info_table = new javax.swing.JTable();
        insertButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        modifyCourseInfo_MenuBar = new javax.swing.JMenuBar();
        backButton = new javax.swing.JMenu();
        logoutButton = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        course_info_form.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        name_label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        name_label.setText("Name:");

        courseNo_label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        courseNo_label.setText("Course Number:");

        courseNo_spinner.setModel(new javax.swing.SpinnerNumberModel(1100, 1100, 5999, 1));

        description_label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        description_label.setText("Description:");

        college_label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        college_label.setText("College:");

        college_combo_box.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        dept_label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        dept_label.setText("Department:");

        dept_combo_box.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        dept_combo_box.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dept_combo_boxMouseClicked(evt);
            }
        });

        type_label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        type_label.setText("Type:");

        type_combo_box.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Lecture", "Discussion", "Seminar", "Laboratory", "Studio", "Independent Study" }));
        type_combo_box.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        mode_label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        mode_label.setText("Mode:");

        mode_combo_box.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Face-to-Face", "Online", "Hybrid" }));
        mode_combo_box.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        maxStudents_label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        maxStudents_label.setText("Max Students:");

        maxStudents_spinner.setModel(new javax.swing.SpinnerNumberModel(10, 10, null, 1));

        credits_label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        credits_label.setText("Credits:");

        credits_spinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        startTime_label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        startTime_label.setText("Start Time:");

        startTime_text_field.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("hh:mm:ss"))));

        endTime_label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        endTime_label.setText("End Time:");

        endTime_text_field.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("hh:mm:ss"))));

        location_label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        location_label.setText("Location:");

        classroomNo_label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        classroomNo_label.setText("Classroom Number:");

        try {
            classroomNo_text_field.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("U-###*")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        courseDays_label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        courseDays_label.setText("Course Days:");

        courseDays_combo_box.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mon", "Tu", "Wed", "Th", "Fri", "Mon/Wed", "Tu/Th" }));
        courseDays_combo_box.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        crn_label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        crn_label.setText("CRN:");

        crn_spinner.setModel(new javax.swing.SpinnerNumberModel(10000, 10000, 99999, 1));

        location_combo_box.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        location_combo_box.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                location_combo_boxMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout course_info_formLayout = new javax.swing.GroupLayout(course_info_form);
        course_info_form.setLayout(course_info_formLayout);
        course_info_formLayout.setHorizontalGroup(
            course_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(course_info_formLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(course_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(course_info_formLayout.createSequentialGroup()
                        .addComponent(name_label)
                        .addGap(18, 18, 18)
                        .addComponent(name_text_field, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(course_info_formLayout.createSequentialGroup()
                        .addGroup(course_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(courseNo_label)
                            .addComponent(description_label)
                            .addComponent(college_label)
                            .addComponent(dept_label)
                            .addComponent(type_label)
                            .addComponent(mode_label))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(course_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mode_combo_box, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(type_combo_box, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dept_combo_box, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(college_combo_box, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(course_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(courseNo_spinner)
                                .addComponent(description_text_field))))
                    .addGroup(course_info_formLayout.createSequentialGroup()
                        .addGroup(course_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(maxStudents_label)
                            .addComponent(credits_label)
                            .addComponent(startTime_label)
                            .addComponent(endTime_label)
                            .addComponent(location_label))
                        .addGap(18, 18, 18)
                        .addGroup(course_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(maxStudents_spinner, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                            .addComponent(credits_spinner)
                            .addComponent(startTime_text_field)
                            .addComponent(endTime_text_field)
                            .addComponent(location_combo_box, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(course_info_formLayout.createSequentialGroup()
                        .addGroup(course_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(classroomNo_label)
                            .addComponent(courseDays_label)
                            .addComponent(crn_label))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(course_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(courseDays_combo_box, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(classroomNo_text_field, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(crn_spinner))))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        course_info_formLayout.setVerticalGroup(
            course_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(course_info_formLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(course_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(name_label)
                    .addComponent(name_text_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(course_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(courseNo_label)
                    .addComponent(courseNo_spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(course_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(description_label)
                    .addComponent(description_text_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(course_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(college_label)
                    .addComponent(college_combo_box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(course_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dept_label)
                    .addComponent(dept_combo_box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(course_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(type_label)
                    .addComponent(type_combo_box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(course_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mode_label)
                    .addComponent(mode_combo_box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(course_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxStudents_label)
                    .addComponent(maxStudents_spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(course_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(credits_label)
                    .addComponent(credits_spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(course_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startTime_label)
                    .addComponent(startTime_text_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(course_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(endTime_label)
                    .addComponent(endTime_text_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(course_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(location_label)
                    .addComponent(location_combo_box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(course_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(classroomNo_label)
                    .addComponent(classroomNo_text_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(course_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(courseDays_label)
                    .addComponent(courseDays_combo_box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(course_info_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(crn_label)
                    .addComponent(crn_spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        course_info_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "courseNo", "Description", "College", "Department", "Type", "Mode", "Instructor_Prefix", "Instructor_fName", "Instructor_mName", "Instructor_lName", "Instructor_Suffix", "numStudents", "maxStudents", "Credits", "startTime", "endTime", "Location", "classroomNo", "courseDays", "CRN"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        course_info_table.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        course_info_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                course_info_tableMouseClicked(evt);
            }
        });
        course_info_scroll_table.setViewportView(course_info_table);

        insertButton.setText("Insert");
        insertButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        insertButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                insertButtonMouseClicked(evt);
            }
        });

        updateButton.setText("Update");
        updateButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        updateButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateButtonMouseClicked(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        deleteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteButtonMouseClicked(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        clearButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearButtonMouseClicked(evt);
            }
        });

        backButton.setText("Back");
        backButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backButtonMouseClicked(evt);
            }
        });
        modifyCourseInfo_MenuBar.add(backButton);

        logoutButton.setText("Logout");
        logoutButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        logoutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logoutButtonMouseClicked(evt);
            }
        });
        modifyCourseInfo_MenuBar.add(logoutButton);

        setJMenuBar(modifyCourseInfo_MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(insertButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(course_info_form, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)
                        .addComponent(course_info_scroll_table, javax.swing.GroupLayout.PREFERRED_SIZE, 589, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(67, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(course_info_scroll_table, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(course_info_form, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(insertButton)
                    .addComponent(updateButton)
                    .addComponent(deleteButton)
                    .addComponent(clearButton))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backButtonMouseClicked
        // Return to adminHome.java.
        this.hide();
        new adminHome().setVisible(true); // Displays adminHome.java
    }//GEN-LAST:event_backButtonMouseClicked

    private void logoutButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutButtonMouseClicked
        // Return to Login.java.
        this.hide(); 
        new Login().setVisible(true); // Displays Login.java
    }//GEN-LAST:event_logoutButtonMouseClicked

    private void course_info_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_course_info_tableMouseClicked
        // Get the clicked row.
        dtm = (DefaultTableModel)course_info_table.getModel();
        int selectedIndex = course_info_table.getSelectedRow();
        
        // Set every field in the form to its respective table value.
        name_text_field.setText(dtm.getValueAt(selectedIndex, 0).toString());
        description_text_field.setText(dtm.getValueAt(selectedIndex, 2).toString());
        college_combo_box.setSelectedItem(dtm.getValueAt(selectedIndex, 3));
        dept_combo_box.setSelectedItem(dtm.getValueAt(selectedIndex, 4));
        type_combo_box.setSelectedItem(dtm.getValueAt(selectedIndex, 5));
        mode_combo_box.setSelectedItem(dtm.getValueAt(selectedIndex, 6));
        startTime_text_field.setText(dtm.getValueAt(selectedIndex, 15).toString());
        endTime_text_field.setText(dtm.getValueAt(selectedIndex, 16).toString());
        location_combo_box.setSelectedItem(dtm.getValueAt(selectedIndex, 17));
        classroomNo_text_field.setText(dtm.getValueAt(selectedIndex, 18).toString());
        courseDays_combo_box.setSelectedItem(dtm.getValueAt(selectedIndex, 19));
        
        // Disable the Insert button.
        insertButton.setEnabled(false);
    }//GEN-LAST:event_course_info_tableMouseClicked

    private void insertButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_insertButtonMouseClicked
        /*
        Check if the admin filled all the text fields. If not, display a pop-up 
        telling them to fill the specified text field. If so, insert the new
        course's info into the database.
        */
        if (name_text_field.getText().isEmpty() || name_text_field.getText().length() > 20)
        {
            JOptionPane.showMessageDialog(this, "The 'Name' text field is either "
                                         + "empty or exceeds 20 characters.");
        }
        else if (description_text_field.getText().isEmpty() || description_text_field.getText().length() > 40)
        {
            JOptionPane.showMessageDialog(this, "The 'Description' text field is either "
                                         + "empty or exceeds 40 characters.");
        }
        else if (startTime_text_field.getText().isEmpty())
            JOptionPane.showMessageDialog(this, "The 'Start Time' text field is empty.");
        else if (endTime_text_field.getText().isEmpty())
            JOptionPane.showMessageDialog(this, "The 'End Time' text field is empty.");
        else if (classroomNo_text_field.getText().isEmpty() || classroomNo_text_field.getText().length() > 30)
        {
            JOptionPane.showMessageDialog(this, "The 'Classroom Number' text field is either "
                                         + "empty or exceeds 30 characters.");
        }
        else
        {
            try
            {
                String classroomNo = (type_combo_box.getSelectedItem().toString().equals("Online")) 
                        ? "null" : classroomNo_text_field.getText();
            
                // Insert the values into the database.
                pst = conn.prepareStatement("insert into course(name, courseNo, description, "
                                          + "college, department, type, mode, maxStudents, "
                                          + "credits, startTime, endTime, location, classroomNo, "
                                          + "courseDays, crn) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                pst.setString(1, name_text_field.getText());
                pst.setString(2, courseNo_spinner.getValue().toString());
                pst.setString(3, description_text_field.getText());
                pst.setString(4, college_combo_box.getSelectedItem().toString());
                pst.setString(5, dept_combo_box.getSelectedItem().toString());
                pst.setString(6, type_combo_box.getSelectedItem().toString());
                pst.setString(7, mode_combo_box.getSelectedItem().toString());
                pst.setString(8, maxStudents_spinner.getValue().toString());
                pst.setString(9, credits_spinner.getValue().toString());
                pst.setString(10, startTime_text_field.getText());
                pst.setString(11, endTime_text_field.getText());
                pst.setString(12, location_combo_box.getSelectedItem().toString());
                pst.setString(13, classroomNo);
                pst.setString(14, courseDays_combo_box.getSelectedItem().toString());
                pst.setString(15, crn_spinner.getValue().toString());
                pst.executeUpdate();
            
                /* Confirm to the admin that a new course's info has been added
                   to the database, clear the form, 
                   and reload all the remaining courses' info.
                */
                JOptionPane.showMessageDialog(this, "New course added.");
                name_text_field.setText("");
                description_text_field.setText("");
                college_combo_box.setSelectedIndex(0);
                dept_combo_box.setSelectedIndex(0);
                type_combo_box.setSelectedIndex(0);
                mode_combo_box.setSelectedIndex(0);
                startTime_text_field.setText("");
                endTime_text_field.setText("");
                location_combo_box.setSelectedIndex(0);
                classroomNo_text_field.setText("");
                courseDays_combo_box.setSelectedIndex(0);
                courseLoad();
            }
            catch (SQLException ex)
            {
                Logger.getLogger(modifyCourseInfo.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_insertButtonMouseClicked

    private void updateButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateButtonMouseClicked
        /*
        Check if the admin filled all the text fields. If not, display a pop-up 
        telling them to fill the specified text field. If so, update the selected
        course's info.
        */
        if (name_text_field.getText().isEmpty() || name_text_field.getText().length() > 20)
        {
            JOptionPane.showMessageDialog(this, "The 'Name' text field is either "
                                         + "empty or exceeds 20 characters.");
        }
        else if (description_text_field.getText().isEmpty() || description_text_field.getText().length() > 40)
        {
            JOptionPane.showMessageDialog(this, "The 'Description' text field is either "
                                         + "empty or exceeds 40 characters.");
        }
        else if (startTime_text_field.getText().isEmpty())
            JOptionPane.showMessageDialog(this, "The 'Start Time' text field is empty.");
        else if (endTime_text_field.getText().isEmpty())
            JOptionPane.showMessageDialog(this, "The 'End Time' text field is empty.");
        else if (classroomNo_text_field.getText().isEmpty() || classroomNo_text_field.getText().length() > 30)
        {
            JOptionPane.showMessageDialog(this, "The 'Classroom Number' text field is either "
                                         + "empty or exceeds 30 characters.");
        }
        else
        {
            try
            {
                // Get the clicked row.
                dtm = (DefaultTableModel)course_info_table.getModel();
                int selectedIndex = course_info_table.getSelectedRow();
            
                // Update each of the selected course's info to its respective field's value.
                String classroomNo = (type_combo_box.getSelectedItem().toString().equals("Online")) 
                        ? "null" : classroomNo_text_field.getText();

                pst = conn.prepareStatement("update course set name = ?, courseNo = ?, "
                                          + "description = ?, college = ?, department = ?, "
                                          + "type = ?, mode = ?, maxStudents = ?, credits = ?, "
                                          + "startTime = ?, endTime = ?, location = ?, "
                                          + "classroomNo = ?, courseDays = ? where "
                                          + "crn = ?");
                pst.setString(1, name_text_field.getText());
                pst.setString(2, courseNo_spinner.getValue().toString());
                pst.setString(3, description_text_field.getText());
                pst.setString(4, college_combo_box.getSelectedItem().toString());
                pst.setString(5, dept_combo_box.getSelectedItem().toString());
                pst.setString(6, type_combo_box.getSelectedItem().toString());
                pst.setString(7, mode_combo_box.getSelectedItem().toString());
                pst.setString(8, maxStudents_spinner.getValue().toString());
                pst.setString(9, credits_spinner.getValue().toString());
                pst.setString(10, startTime_text_field.getText());
                pst.setString(11, endTime_text_field.getText());
                pst.setString(12, location_combo_box.getSelectedItem().toString());
                pst.setString(13, classroomNo);
                pst.setString(14, courseDays_combo_box.getSelectedItem().toString());
                pst.setString(15, dtm.getValueAt(selectedIndex, 20).toString());
                pst.executeUpdate();
            
                /* Confirm to the admin that the selected course's info has been updated, 
                   clear the form, and reload all the remaining courses' info.
                */
                JOptionPane.showMessageDialog(this, "Course's info is updated.");
                name_text_field.setText("");
                description_text_field.setText("");
                college_combo_box.setSelectedIndex(0);
                dept_combo_box.setSelectedIndex(0);
                type_combo_box.setSelectedIndex(0);
                mode_combo_box.setSelectedIndex(0);
                startTime_text_field.setText("");
                endTime_text_field.setText("");
                location_combo_box.setSelectedIndex(0);
                classroomNo_text_field.setText("");
                courseDays_combo_box.setSelectedIndex(0);
                courseLoad();
            }
            catch (SQLException ex)
            {
                Logger.getLogger(modifyCourseInfo.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_updateButtonMouseClicked

    private void deleteButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseClicked
        try
        {
            // Get the selected row.
            dtm = (DefaultTableModel)course_info_table.getModel();
            int selectedIndex = course_info_table.getSelectedRow();
            
            // Delete the selected course's info from both the database and the table.
            pst = conn.prepareStatement("delete from course where crn = ?");
            pst.setString(1, dtm.getValueAt(selectedIndex, 20).toString());
            pst.executeUpdate();
            
            /* Confirm to the admin that the selected course's info has been deleted,
               clear the form, and reload the remaining courses' info.
            */
            JOptionPane.showMessageDialog(this, "Course's info is deleted.");
            name_text_field.setText("");
            description_text_field.setText("");
            college_combo_box.setSelectedIndex(0);
            dept_combo_box.setSelectedIndex(0);
            type_combo_box.setSelectedIndex(0);
            mode_combo_box.setSelectedIndex(0);
            startTime_text_field.setText("");
            endTime_text_field.setText("");
            location_combo_box.setSelectedIndex(0);
            classroomNo_text_field.setText("");
            courseDays_combo_box.setSelectedIndex(0);
            courseLoad();
        }
        catch (SQLException ex)
        {
            Logger.getLogger(modifyCourseInfo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_deleteButtonMouseClicked

    private void clearButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearButtonMouseClicked
        // Clear all the text fields.
        name_text_field.setText("");
        description_text_field.setText("");
        college_combo_box.setSelectedIndex(0);
        dept_combo_box.setSelectedIndex(0);
        type_combo_box.setSelectedIndex(0);
        mode_combo_box.setSelectedIndex(0);
        startTime_text_field.setText("");
        endTime_text_field.setText("");
        location_combo_box.setSelectedIndex(0);
        classroomNo_text_field.setText("");
        courseDays_combo_box.setSelectedIndex(0);
    }//GEN-LAST:event_clearButtonMouseClicked

    private void dept_combo_boxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dept_combo_boxMouseClicked
        try
        {
            /*
            Load each department's name which corresponds to the college that the admin
            chose.
            */
            pst = conn.prepareStatement("select name from department where college = ?");
            pst.setString(1, college_combo_box.getSelectedItem().toString());
            rs = pst.executeQuery();

            // Load all the departments' names into the combo box.
            dept_combo_box.removeAllItems();
            while (rs.next())
                dept_combo_box.addItem(rs.getString("name"));            
        }
        catch (SQLException ex)
        {
            Logger.getLogger(modifyCourseInfo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_dept_combo_boxMouseClicked

    private void location_combo_boxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_location_combo_boxMouseClicked
        try
        {
            switch (mode_combo_box.getSelectedItem().toString())
            {
                case "Face-to-Face":
                    /*
                    Load the address's name which corresponds to the department that the admin
                    chose.
                    */
                    pst = conn.prepareStatement("select address from department where name = ?");
                    pst.setString(1, dept_combo_box.getSelectedItem().toString());
                    rs = pst.executeQuery();

                    // Load the address's name into the combo box.
                    location_combo_box.removeAllItems();
                    while (rs.next())
                        location_combo_box.addItem(rs.getString("address"));
                    break;
                    
                case "Online":
                    // Insert "Blackboard" into the location combo box.
                    location_combo_box.removeAllItems();
                    location_combo_box.addItem("Blackboard");
                    break;
                    
                case "Hybrid":
                    /*
                    Load the address's name which corresponds to the department that the admin
                    chose.
                    */
                    pst = conn.prepareStatement("select address from department where name = ?");
                    pst.setString(1, dept_combo_box.getSelectedItem().toString());
                    rs = pst.executeQuery();

                    /*
                    Load the address's name into the combo box and concatenate " 
                    & Blackboard" to it.
                    */
                    location_combo_box.removeAllItems();
                    while (rs.next())
                        location_combo_box.addItem(rs.getString("address") + " & Blackboard");
                    break;
            }
                        
        }
        catch (SQLException ex)
        {
            Logger.getLogger(modifyCourseInfo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_location_combo_boxMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(modifyCourseInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(modifyCourseInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(modifyCourseInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(modifyCourseInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new modifyCourseInfo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu backButton;
    private javax.swing.JLabel classroomNo_label;
    private javax.swing.JFormattedTextField classroomNo_text_field;
    private javax.swing.JButton clearButton;
    private javax.swing.JComboBox<String> college_combo_box;
    private javax.swing.JLabel college_label;
    private javax.swing.JComboBox<String> courseDays_combo_box;
    private javax.swing.JLabel courseDays_label;
    private javax.swing.JLabel courseNo_label;
    private javax.swing.JSpinner courseNo_spinner;
    private javax.swing.JPanel course_info_form;
    private javax.swing.JScrollPane course_info_scroll_table;
    private javax.swing.JTable course_info_table;
    private javax.swing.JLabel credits_label;
    private javax.swing.JSpinner credits_spinner;
    private javax.swing.JLabel crn_label;
    private javax.swing.JSpinner crn_spinner;
    private javax.swing.JButton deleteButton;
    private javax.swing.JComboBox<String> dept_combo_box;
    private javax.swing.JLabel dept_label;
    private javax.swing.JLabel description_label;
    private javax.swing.JTextField description_text_field;
    private javax.swing.JLabel endTime_label;
    private javax.swing.JFormattedTextField endTime_text_field;
    private javax.swing.JButton insertButton;
    private javax.swing.JComboBox<String> location_combo_box;
    private javax.swing.JLabel location_label;
    private javax.swing.JMenu logoutButton;
    private javax.swing.JLabel maxStudents_label;
    private javax.swing.JSpinner maxStudents_spinner;
    private javax.swing.JComboBox<String> mode_combo_box;
    private javax.swing.JLabel mode_label;
    private javax.swing.JMenuBar modifyCourseInfo_MenuBar;
    private javax.swing.JLabel name_label;
    private javax.swing.JTextField name_text_field;
    private javax.swing.JLabel startTime_label;
    private javax.swing.JFormattedTextField startTime_text_field;
    private javax.swing.JComboBox<String> type_combo_box;
    private javax.swing.JLabel type_label;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
